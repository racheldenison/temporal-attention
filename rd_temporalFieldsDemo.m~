% rd_temporalFieldsDemo.m

% p = temporalFieldsParams;
p.testingLocation = 'laptop';
p.keyNames = {'1!','2@'};
p.keyCodes = KbName(p.keyNames);
p.backgroundColor = 0.5;
p.imageDur = 1/60;
p.cueTargetSOA = 0.5;

% SOA conditions
p.soas = [-20 -10 10 20]*(1/60);

% Target present / absent conditions
p.targetPresAbs = [1 0]; % 1=present, 0=absent

pixelsPerDegree = 99;

nReps = 3;

% Find keyboard device number
devNums = findKeyboardDevNumsAtLocation(p.testingLocation);
if isempty(devNums.Keypad)
    error('Could not find Keypad!')
end
devNum = devNums.Keypad;

% Sound for starting trials
v = 1:1000;
envelope = [0:.05:1 ones(1,1000-42) 1:-.05:0];

% Response error sound
% errorsound = 0.25 * sin(40*pi*v/30);
errorsound = (.8 * sin(3*pi*v/30) + sin(5*pi*v/30)).*envelope;

% Response correct sound
correctsound = (0.7 * sin(6*pi*v/30)).*envelope;

% Calculate stimulus dimensions (px) and position
% imPos = round(ang2pix(p.imPos, p.screenSize(1), p.screenRes(1), p.viewDist, 'radial')); % from screen center
% imSize = round(ang2pix(p.imSize, p.screenSize(1), p.screenRes(1), p.viewDist, 'central'));
% fixSize = round(ang2pix(p.fixSize, p.screenSize(1), p.screenRes(1), p.viewDist, 'central'));
% pixelsPerDegree = round(ang2pix(1, p.screenSize(1), p.screenRes(1), p.viewDist, 'central'));
% imPos = [1 -1]*50;
fixSize = 5;
imPos = [0 0];
targetSize = 20;
surroundSize = 20;

% Set up window and textures
screenNumber = max(Screen('Screens'));
% [win rect] = Screen('OpenWindow', screenNumber);
[win rect] = Screen('OpenWindow', screenNumber, [], [0 0 800 600]);
white = WhiteIndex(win);  % Retrieves the CLUT color code for white.
[cx cy] = RectCenter(rect);
fixRect = CenterRectOnPoint([0 0 fixSize fixSize], cx, cy);

% Make target and surround gratings
imSizeDeg = [4 4];
spatialFrequency = 3;
orientation = 0;
targetContrast = 0.02;
surroundContrast = 0.1;
blurRadius = 0.1;

% make big gratings that will later be masked
t = buildColorGrating(pixelsPerDegree, imSizeDeg, ...
    spatialFrequency, orientation, 0, targetContrast, 0, 'bw');
s = buildColorGrating(pixelsPerDegree, imSizeDeg, ...
    spatialFrequency, orientation, 0, surroundContrast, 0, 'bw');
blank = buildColorGrating(pixelsPerDegree, imSizeDeg, ...
    spatialFrequency, orientation, 0, 0, 0, 'bw');

% Mask with annulus
target = maskWithGaussian(t, size(t,1), targetSize);
surround = maskWithGaussian(s, size(s,1), surroundSize);

% Make textures
targetTex = Screen('MakeTexture', win, target*white);
surroundTex = Screen('MakeTexture', win, surround*white);
blankTex = Screen('MakeTexture', win, blank*white);

% Make the rect for placing the images
imSize = size(target,1);
imRect = CenterRectOnPoint([0 0 imSize imSize], cx+imPos(1), cy+imPos(2));

% Construct trials matrix
trials_headers = {'soaCond','targetPresAbsCond','soa','actualSOA','rt','responseKey','response','correct'};

trials = fullfact([numel(p.soas) numel(p.targetPresAbs)]);
trials = repmat(trials, nReps, 1);
nTrials = size(trials,1);

%%% for debugging, just show all the stimuli
% trials(:,2) = 1;

% Choose order of trial presentation
trialOrder = randperm(nTrials);

% Show background screen
Screen('FillRect', win, white*p.backgroundColor);
vbl = Screen('Flip', win);

% Trials
for iTrial = 1:nTrials
    % get conditions for this trial
    trialIdx = trialOrder(iTrial);
    soa = p.soas(trials(trialIdx,1));
    targetPresent = p.targetPresAbs(trials(trialIdx,2));
    
    if soa < 0
        tex1 = surroundTex;
        if targetPresent == 1
            tex2 = targetTex;
        else
            tex2 = blankTex;
        end
        cueIm1SOA = p.cueTargetSOA + soa; % surround
        cueIm2SOA = p.cueTargetSOA; % target
    else
        if targetPresent == 1
            tex1 = targetTex;
        else
            tex1 = blankTex;
        end
        tex2 = surroundTex;
        cueIm1SOA = p.cueTargetSOA; % target
        cueIm2SOA = p.cueTargetSOA + soa; % surround
    end
    
    % Present cue
    %%% no cue for now
%     Screen('FillRect', window ,[255 0 0] ,fixRect);
    timeCue = GetSecs;
    sound(startSound);
    
    % Present images
    Screen('DrawTexture', win, tex1, [], imRect);
    timeIm1 = Screen('Flip', win, timeCue + cueIm1SOA);
    
    if abs(soa)>p.imageDur
        Screen('FillRect', win, white*p.backgroundColor);
        timeBlank1 = Screen('Flip', win, timeIm1 + p.imageDur);
    end
    
    Screen('DrawTexture', win, tex2, [], imRect);
    timeIm2 = Screen('Flip', win, timeCue + cueIm2SOA);
    
    Screen('FillRect', win, white*p.backgroundColor);
    timeBlank2 = Screen('Flip', win, timeIm2 + p.imageDur);
    
    % Find the actual times the target and surround were presented
    if soa < 0
        timeSurround = timeIm1;
        timeTarget = timeIm2;
    else
        timeTarget = timeIm1;
        timeSurround = timeIm2;
    end
    
    % Collect response
    [secs, keyCode] = KbWait(devNum);
    rt = secs - timeTarget;
    
    % Feedback
    responseKey = find(p.keyCodes==find(keyCode));
    response = p.targetPresAbs(responseKey);
    if response==targetPresent;
        correct = 1;
    else
        correct = 0;
    end
    
    % Store trial info
    trials(trialIdx,3) = soa;
    trials(trialIdx,4) = timeSurround - timeTarget;
    trials(trialIdx,5) = rt;
    trials(trialIdx,6) = responseKey;
    trials(trialIdx,7) = response;
    trials(trialIdx,8) = correct;
end

% Show end of block feedback
% acc = mean(trials(:,6));

% Store expt info
expt.trialOrder = trialOrder;

results.trials_headers = trials_headers;
results.trials = trials;

% Clean up
Screen('CloseAll')

% Analyze data
for iSOA = 1:numel(p.soas)
    w = trials(:,1)==iSOA;
    totals.all(:,:,iSOA) = trials(w,:);
end

totals.means = squeeze(mean(totals.all,1))';
totals.stds = squeeze(std(totals.all,0,1))';
totals.stes = totals.stds./sqrt(size(totals.all,1));

accMean = totals.means(:,8);
accSte = totals.stes(:,8);

% Plot figs
figure
errorbar(p.soas, accMean, accSte, 'k')

figure
scatter(trials(:,3), trials(:,4))


